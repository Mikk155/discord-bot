{
	"on_initialization":
	{
		"prefix":
		[
			"on_initialization"
		],
		"body" :
		[
			"def on_initialization() -> dict:",
			"\t'''",
			"\tCalled when the script is executed, this is the first hook ever called.\n",
			"\tThe bot is not even initialized yet.\n",
			"\tThis hook is required on all plugins and must return data.",
			"\t'''\n",
			"\t# Create data for g_PluginManager",
			"\t__data__: dict = {};",
			"\t__data__[\"author\"] = \"${1:Author name}\";",
			"\t__data__[\"contact\"] = \"${2:Author contact url}\";",
			"\t__data__[\"name\"] = \"${3:Plugin's Name}\";",
			"\t__data__[\"description\"] = \"${4:Plugin's Description}\";",
			"\t__hooks__: list[Hooks] = [ ${5:Hooks.variables} ];",
			"\t__data__[\"hooks\"] = __hooks__;\n",
			"\t# Return data for g_PluginManager",
			"\treturn __data__;\n"
		],
		"scope": "python"
	},
	"on_command":
	{
		"prefix":
		[
			"on_command",
			"on_app_command",
			"app_command"
		],
		"body" :
		[
			"@bot.tree.command()",
			"async def ${1:Command name}( interaction: discord.Interaction ):",
			"\t'''",
			"\t${2:Command description}",
			"\t'''\n",
			"\tawait interaction.response.defer( thinking=True, ephemeral=${3:False} );\n",
			"\ttry:\n",
			"\t\t${4:Your code here}\n",
			"\texcept Exception as e:\n",
			"\t\tawait bot.exception_handle( e, interaction=interaction );\n",
		],
		"scope": "python"
	},
	"on_start":
	{
		"prefix": "on_start",
		"body" : "async def on_start() -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_ready":
	{
		"prefix": "on_ready",
		"body" : "async def on_ready() -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_member_join":
	{
		"prefix": "on_member_join",
		"body" : "async def on_member_join( member : discord.Member ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_member_remove":
	{
		"prefix": "on_member_remove",
		"body" : "async def on_member_remove( member : discord.Member ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_message":
	{
		"prefix": "on_message",
		"body" : "async def on_message( message: discord.Message ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_message_delete":
	{
		"prefix": "on_message_delete",
		"body" : "async def on_message_delete( message: discord.Message ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_message_edit":
	{
		"prefix": "on_message_edit",
		"body" : "async def on_message_edit( before: discord.Message, after: discord.Message ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_reaction_add":
	{
		"prefix": "on_reaction_add",
		"body" : "async def on_reaction_add( reaction: discord.Reaction, user : discord.User ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_reaction_remove":
	{
		"prefix": "on_reaction_remove",
		"body" : "async def on_reaction_remove( reaction: discord.Reaction, user : discord.User ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_think":
	{
		"prefix": "on_think",
		"body" : "async def on_think() -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_mention":
	{
		"prefix": "on_mention",
		"body" : "async def on_mention( message: discord.Message, mentions: list[ discord.Member | discord.User ] ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_reply":
	{
		"prefix": "on_reply",
		"body" : "async def on_reply( message: discord.Message, replied: discord.Message ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_link":
	{
		"prefix": "on_link",
		"body" : "async def on_link( message: discord.Message, urls: list[str] ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_daily":
	{
		"prefix": "on_daily",
		"body" : "async def on_daily() -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
	"on_typing":
	{
		"prefix": "on_typing",
		"body" : "async def on_typing( channel: discord.TextChannel | discord.GroupChannel | discord.DMChannel, user: discord.Member | discord.User, when: datetime.datetime ) -> int:\n\n\t${1:}\n\n\treturn HOOK_CONTINUE();\n",
		"scope": "python"
	},
}
